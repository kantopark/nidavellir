setup:
  # when build is true, application will look for a Dockerfile in the repository
  # and build the image. The image name will be given by the 'image' setting
  # seen below. The image name must be provided in this case
  build: false
  # commit is only used when build is true. This determines which "commit" or
  # "tag" to checkout from the repository to build the image. If left empty or
  # given the values "latest" or "master", it will checkout "master"
  commit:
  # The image that is used to run the task. If it does not exist in the local
  # image repository, will attempt to pull it. If provided, the user should
  # ideally provide the tags as well to "version control" it
  image: danielbok/nida-python:3.7.6

# global environment variables
environment:
  key: value will be a string,
  key1: "9090"
  key2: previous value is quoted because yaml can interpret that as a int or decimal

steps:
  # elements in steps are executed in order with the name representing the step name
  # try not to name different steps with the same name as it'll lead to unintended
  # behaviour during branching
  - name: Extraction
    environment:
      stepEnv1: any string value which will be same across all tasks
    tasks:
      # elements in list are executed together
      - name: Extract from DB A
        cmd: extract_a.py
        environment:
          key: overrides global environment "key"

      - name: Extract from DB B
        cmd: extract_b.py

    # branch determines the next step based on the exit code. It is OPTIONAL
    # By default, an exit code of 0 will move to the next step and any other
    # undefined exit codes will EXIT the program. When multiple tasks are in
    # defined in the step, the step which returns the largest exit code will
    # be the final exit code used to determine the branching rule
    branch:
      # this is actually the default behaviour
      - code: 0  # exit code, this must be non-negative (i.e. >= 0)
        step: Transformation 1

      # this behaviour is redundant as EXIT will be called whenever an unknown exit
      # code is given. However, you can still choose to be explicit. In any case, do
      # not name any of your step groups as EXIT, as rather than going to that step
      # group, the program will actually exit entirely
      - code: 999
        step: EXIT

      # Go to the name specified by "step" if that exit code is met
      - code: 1
        step: Store
  - name: Transformation 1
    tasks:
      - name: Transform just A
        cmd: transform_a.py

      - name: Transform A and B together which takes a long time
        cmd: transform_long.py

  - name: Transformation 2
    tasks:
      - name: Combine Previous 2 transformations
        cmd: transform_2.py

  - name: Store
    tasks:
      - name: Save results of transformation 2 to DB C
        cmd: save.py
