# The account config sets the default username and password on initial load and after reset
# this account is used to do all source and job operations. When the app is started, this is
# the default account saved in the database. The password should be changed on startup. This
# account has the ability to create and remove any subsequent accounts
account:
  username: admin
  password: password  # change this with the environment variable nida_admin.password

app:
  # working directory, leave this empty to use the default working directory
  workdir: ""
  # Both keyfile and certfile file must be specified for TLS to work
  tls:
    # path to the private key. Leave empty if not using TLS
    keyfile: ""
    # path to the public key. Leave empty if not using TLS
    certfile: ""
  # port that the server app runs on
  port: 7050
  # personal access token settings. The repos provided will be cloned by a single system account
  # whose credentials are provided
  pat:
    # the remote provider. It can be github, gitlab-ci-token, gitlab-oauth2 or "" (empty string)
    provider: github
    # the token used. You could put the token in the config file and then put the config file
    # next to the go-executable. Alternatively, you can inject the token via the
    # `nida_app.pat.token` environment variable before running the go-executable
    token:


# additional authorization plugins. Presently, the supported types are JWT and BASIC.
# Nidavellir's BASIC auth uses accounts that are managed in Nidavellir's own database.
# JWT auth uses an external signing server but verifies using the publicKey key in the
# info map. Authentication is a list of AuthConfig objects where the extra information
# are stored in the info map.
auth:
  - type: BASIC
  - type: JWT
    info:
      # path to public key file for decoding/validating the jwt
      publicKey: /path/to/public/key


# container run and build configuration
run:
  # maximum duration each task can run. For valid duration string, see the docs at
  # https://golang.org/pkg/time/#ParseDuration. Put 0 for unlimited duration.
  # However, it is recommended to put at least some values else the system will
  # choke as there could be a task in an infinite loop. The default is 45 min
  # which should be good for really long running ETL jobs
  max-duration: 45m

  # environment variables that will be injected when building the image
  # it is useful to set http proxies in here
  build-args:
    key: useful to put in http_proxy and https_proxy here
